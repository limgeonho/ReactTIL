npx create-react-app myapp

npm start : 서버 실행

npm i prop-types : prop-types설치

component의 요소 : state, prop, effect

커스터마이징한 css불러오기 
1. xxx.module.css 파일에 직접 css 내용을 작성
2. 사용하려는 component에서 import styles from "./xxx.module.css";
3. <h1 className={styles.title}>Welcome back!!!</h1> : {styles.title}형태로 불러오기

============================================================================

effect를 사용하는 이유?
react는 자동적으로 state가 변화하면 화면을 리랜더링한다
하지만 api를 불러오는 경우 처음에 랜더링을 한 후에 값이 달라지게 되면 또다시 화면을 리랜더린하면서 api를 다시 호출한다
이러한 불필요한 리랜더링을 막고 처음에 한번만 랜더링하기 위해서 effect를 사용한다.

import { useState, useEffect } from "react"; 에서 useEffect를 추가한다.

useEffect(() => {}, []) : 1번째 인자에는 function이 들어오고, 2번째 인자에는 state가 바뀌면 해당 함수를 실행하게 될 state가 들어온다
[]가 비어있다면 맨 처음에 랜더링될때만 실행된다.

결론 : React의 장점은 state에 등록하면 해당 값이 바뀔때마다 알아서 새로고침 되는 것이다. 하지만 새로고침을 굳이하지 않아도 되는 부분
즉, 선택적으로 새로고침을 하기 위해서 useEffect를 사용하고 [] 안에 감시대상을 설정해서 원하는 state만 새로고침되게 할 수 있다. 

============================================================================

Cleanup function
지정한 component가 T/F값에 따라서 사라지거나 나타날때 반드시 해당 component는 실행된다.
component는 단순하게 jsx를 return하는 function일 뿐이기 때문에...

이때, 해당 component가 만들어질때 실행되는 함수가 있고 해당 component가 사라질때 실행되는 함수가있다.
사라질때 실행되는 함수 == cleanup function
function createFn(){
  console.log("created!");
  return destroyFn; // 해당 부분이 cleanup function! 
}
처음 실행되는 함수에 return 값으로 해당 component가 사라질때 실행하고 싶은 cleanup function을 넣으면 된다.

============================================================================

practice_1_todo

setToDos((currentArray) => [toDo, ...currentArray]); // [toDo, ...currentArray]는 기존의 []안에 toDo라는 새로운 element를 넣는 방법!! ...!

{toDos.map((item, index) => <li key={index}>{item}</li>)} // toDos안에 있는 element들에 각각 접근해서 각각의 element를 <li>로 감싼다.
이때, map함수를 사용하기 위해서는 1번째 인자로는 value가 들어가고 2번째 인자로는 이들을 구별할 수 있는 index값이 들어간다!(Vue에서 for 사용할때도 key값을 넣었었음!!)

============================================================================

practice_2_coin_tracker

useEffect(() => {
  fetch("https://api.coinpaprika.com/v1/tickers")
  .then((response) => response.json())
  .then((json) => {
    setCoins(json);
    setLoading(false);
  });
}, [])

이번 강의에서는 url을 통해서 크롤링하는 방법 fetch().then()

============================================================================

practice_3_movie_app

기존의 useEffect내부에서fetch().then()한 것을 async, await로 바꿈
const getMovies = async() => {
  const json = await(
    await fetch(`https://yts.mx/api/v2/list_movies.json?minimum_rating=9&sort_by=year`
    )
  ).json();
    setMovies(json.data.movies);
    setLoading(false);
};

useEffect(() => {
  getMovies();
}, []);

------------------------------------------------
router로 분리하기!!
npm install react-router-dom 설치

import {
  BrowserRouter as Router,
  Switch,
  Route,
} from "react-router-dom";

function App() {
  return (
  // Router -> Switch -> Route 순서로 작성하고 <Route path="경로">component<Route/>으로 작성, path="/"가 가장 마지막에 나와야한다.
  <Router>
    <Switch>

      <Route path="/movie">
        <Detail/>
      </Route>
      
      <Route path="/">
        <Home/>
      </Route>

    </Switch>
  </Router>
  );
}

추가적으로 component안에서 다른 링크로 routing하려면 import { Link } from "react-router-dom";
한 뒤에 <Link to="/movie">{title}</Link> 식으로 <Link>으로 감싼다. => SPA가능(새로고침 x)

await는 async안에 있지 않으면 사용할 수 없다.

동적으로 라우팅하는 방법
<Route path="/movie/:id"> 
  <Detail/>
</Route>
에서 /movie/:id 부분

<Link to={`/movie/${id}`}>{title}</Link> 에서 ${id}를 통해 id를 전달받고 App.js의 Route에서 id를 전달받는다
그리고 해당 페이지로 들어간뒤 url의 id값을 가져오기 위해서는
import { useParams } from "react-router-dom"; 하고
const {id} = useParams(); // <Route path="/movie/:id">에서 :id의 값을 받아온다

------------------------------------------------









