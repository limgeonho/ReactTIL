npm install redux


==============================================
store는 data를 저장하는 공간

const reducer = () => {  // reducer는 반드시 function이어야 하고 store에 들어간 data를 관리(modify)한다. 
  return 리턴값; // 리턴값은 store의 data가 된다. 추가적으로 이 data를 modify하는 방법은 reducer안에서 밖에 할 수 없다.
  }; 

const store = createStore(reducer);

action이란? // countModifier와 소통하는 방법
const countModifier = (count=0, action) => { // action은 반드시 type를 object형태로 가지고 있어야 한다.
  if (action.type === "ADD"){
    return count += 1; // data에는 count에 1을 더한 1이 저장된다.
  }
}
const store = createStore(countModifier); 
// 에서 store에 들어있는 data를 바꾸는 방법은 countModifier를 이용하는 것임
// 해당 countModifier에 message를 보내는 방법은 action을 호출하는 것임
// 그렇다면 action을 호출하는 방법은 store.dispatch({ type : "ADD"}); 로 dispatch하는 것임

subscribe이란? // store에 변경이 감지되면 다른 function을 실행하는 것
const onChange () => {};
store.subscribe(onChange); // store안에 변화를 감지하면 onChange라는 function을 실행

==============================================

const reducer = (state = [], action) => {}; // reducer은 2개의 argument를 받을 수 있음! default로는 빈 array

NEVER mutate state
=> 항상 새로운 state를 만들고 그 새로운 state를 return한다!!
● state는 single source of truth이며, read-only이다
● store을 수정할 수 있는 유일한 방법은 action을 보내는 방법뿐이다.
● state를 mutate하지 말아야한다.
▷ mutating state하는 대신에 new state objects를 리턴해야 한다.

...state ▷ state array안의 모든 content

const reducer = (state = [], action) => {
  switch (action.type) {
    case ADD_TODO:
      return [...state, { text: action.text, id: Date.now() }]; // 이 부분!!
    case DELETE_TODO:
      return [];
    default:
      return state;
  }
};

JS에서 array에서 element를 삭제하기 위해서는 splice()가 아니라 filter()를 사용하자(filter()는 mutate를 하지 않고 create해서 return하기 때문에)
ex)
const result = words.filter(word => word.length > 6); // filter에서 true인 값들로만 다시 구성해서 return함.
=> 이러한 방법을 굳이 사용하는 이유는? state를 절대로 mutate하지 않기 위해서!

==============================================

[react-redux]

npm install react-redux react-router-dom

router 설정이 약간 다름
<Router>
  <Routes>
     <Route path="/" exact element={<Home/>}></Route>
     <Route path="/:id" element={<Detail/>}></Route>
   </Routes>
</Router>

== index.js ==
import React from "react";
import ReactDOM from "react-dom";
import App from "./components/App";

import { Provider } from "react-redux"; // react-redux 사용!
import store from "./store";

ReactDOM.render(
  <Provider store={store}> // 해당 부분에서 store.js와 index.js를 연결한다. <Provider>을 통해!!!
    <App/>
  </Provider>,
 document.getElementById("root")
);


mapStateToProps, mapDispatchToProps????




